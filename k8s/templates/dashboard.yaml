apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.namespace }}
    component: dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.namespace }}
      component: dashboard
  template:
    metadata:
      labels:
        app: {{ .Values.namespace }}
        component: dashboard
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "5000"
    spec:
      imagePullSecrets:
        - name: ecr-secret
      containers:
        - name: api
          image: "{{ .Values.dashboard.image.repository }}:{{ .Values.dashboard.image.tag }}"
          imagePullPolicy: "{{ .Values.dashboard.image.pullPolicy }}"
          env:
            - name: SURREALDB_HOST
              value: surrealdb
            - name: SURREALDB_PORT
              value: "8000"
            - name: SURREALDB_NS
              value: "{{ .Values.surrealdb.namespace }}"
            - name: SURREALDB_DB
              value: "{{ .Values.surrealdb.database }}"
            - name: SURREALDB_USER
              valueFrom: { secretKeyRef: { name: surreal-secret, key: user } }
            - name: SURREALDB_PASS
              valueFrom: { secretKeyRef: { name: surreal-secret, key: pass } }
          ports: [ { containerPort: 5000 } ]
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5000
            initialDelaySeconds: 20
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5000
            initialDelaySeconds: 15
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: dashboard-service
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.namespace }}
    component: dashboard
spec:
  selector:
    app: {{ .Values.namespace }}
    component: dashboard
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: ClusterIP
